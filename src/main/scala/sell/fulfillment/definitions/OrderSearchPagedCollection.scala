/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class OrderSearchPagedCollection(href: Option[String] = None, limit: Option[Int] = None, next: Option[String] = None, offset: Option[Int] = None, orders: Option[_root_.scala.Vector[Order]] = None, prev: Option[String] = None, total: Option[Int] = None, warnings: Option[_root_.scala.Vector[Error]] = None)
object OrderSearchPagedCollection {
  implicit val encodeOrderSearchPagedCollection: _root_.io.circe.Encoder.AsObject[OrderSearchPagedCollection] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[OrderSearchPagedCollection](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("href", a.href.asJson), ("limit", a.limit.asJson), ("next", a.next.asJson), ("offset", a.offset.asJson), ("orders", a.orders.asJson), ("prev", a.prev.asJson), ("total", a.total.asJson), ("warnings", a.warnings.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeOrderSearchPagedCollection: _root_.io.circe.Decoder[OrderSearchPagedCollection] = new _root_.io.circe.Decoder[OrderSearchPagedCollection] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[OrderSearchPagedCollection] = for (v0 <- c.downField("href").as[Option[String]]; v1 <- c.downField("limit").as[Option[Int]]; v2 <- c.downField("next").as[Option[String]]; v3 <- c.downField("offset").as[Option[Int]]; v4 <- c.downField("orders").as[Option[_root_.scala.Vector[Order]]]; v5 <- c.downField("prev").as[Option[String]]; v6 <- c.downField("total").as[Option[Int]]; v7 <- c.downField("warnings").as[Option[_root_.scala.Vector[Error]]]) yield OrderSearchPagedCollection(v0, v1, v2, v3, v4, v5, v6, v7) }
}