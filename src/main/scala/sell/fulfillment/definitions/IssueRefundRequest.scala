/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class IssueRefundRequest(reasonForRefund: Option[String] = None, comment: Option[String] = None, refundItems: Option[_root_.scala.Vector[RefundItem]] = None, orderLevelRefundAmount: Option[SimpleAmount] = None)
object IssueRefundRequest {
  implicit val encodeIssueRefundRequest: _root_.io.circe.Encoder.AsObject[IssueRefundRequest] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[IssueRefundRequest](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("reasonForRefund", a.reasonForRefund.asJson), ("comment", a.comment.asJson), ("refundItems", a.refundItems.asJson), ("orderLevelRefundAmount", a.orderLevelRefundAmount.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeIssueRefundRequest: _root_.io.circe.Decoder[IssueRefundRequest] = new _root_.io.circe.Decoder[IssueRefundRequest] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[IssueRefundRequest] = for (v0 <- c.downField("reasonForRefund").as[Option[String]]; v1 <- c.downField("comment").as[Option[String]]; v2 <- c.downField("refundItems").as[Option[_root_.scala.Vector[RefundItem]]]; v3 <- c.downField("orderLevelRefundAmount").as[Option[SimpleAmount]]) yield IssueRefundRequest(v0, v1, v2, v3) }
}