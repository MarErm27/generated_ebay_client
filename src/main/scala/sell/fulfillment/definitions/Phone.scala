/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Phone(countryCode: Option[String] = None, number: Option[String] = None)
object Phone {
  implicit val encodePhone: _root_.io.circe.Encoder.AsObject[Phone] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Phone](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("countryCode", a.countryCode.asJson), ("number", a.number.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePhone: _root_.io.circe.Decoder[Phone] = new _root_.io.circe.Decoder[Phone] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Phone] = for (v0 <- c.downField("countryCode").as[Option[String]]; v1 <- c.downField("number").as[Option[String]]) yield Phone(v0, v1) }
}