/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class DisputeEvidence(evidenceId: Option[String] = None, evidenceType: Option[String] = None, files: Option[_root_.scala.Vector[FileInfo]] = None, lineItems: Option[_root_.scala.Vector[OrderLineItems]] = None, providedDate: Option[String] = None, requestDate: Option[String] = None, respondByDate: Option[String] = None, shipmentTracking: Option[_root_.scala.Vector[TrackingInfo]] = None)
object DisputeEvidence {
  implicit val encodeDisputeEvidence: _root_.io.circe.Encoder.AsObject[DisputeEvidence] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[DisputeEvidence](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("evidenceId", a.evidenceId.asJson), ("evidenceType", a.evidenceType.asJson), ("files", a.files.asJson), ("lineItems", a.lineItems.asJson), ("providedDate", a.providedDate.asJson), ("requestDate", a.requestDate.asJson), ("respondByDate", a.respondByDate.asJson), ("shipmentTracking", a.shipmentTracking.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeDisputeEvidence: _root_.io.circe.Decoder[DisputeEvidence] = new _root_.io.circe.Decoder[DisputeEvidence] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[DisputeEvidence] = for (v0 <- c.downField("evidenceId").as[Option[String]]; v1 <- c.downField("evidenceType").as[Option[String]]; v2 <- c.downField("files").as[Option[_root_.scala.Vector[FileInfo]]]; v3 <- c.downField("lineItems").as[Option[_root_.scala.Vector[OrderLineItems]]]; v4 <- c.downField("providedDate").as[Option[String]]; v5 <- c.downField("requestDate").as[Option[String]]; v6 <- c.downField("respondByDate").as[Option[String]]; v7 <- c.downField("shipmentTracking").as[Option[_root_.scala.Vector[TrackingInfo]]]) yield DisputeEvidence(v0, v1, v2, v3, v4, v5, v6, v7) }
}