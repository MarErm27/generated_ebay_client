/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ShippingFulfillmentDetails(lineItems: Option[_root_.scala.Vector[LineItemReference]] = None, shippedDate: Option[String] = None, shippingCarrierCode: Option[String] = None, trackingNumber: Option[String] = None)
object ShippingFulfillmentDetails {
  implicit val encodeShippingFulfillmentDetails: _root_.io.circe.Encoder.AsObject[ShippingFulfillmentDetails] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ShippingFulfillmentDetails](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("lineItems", a.lineItems.asJson), ("shippedDate", a.shippedDate.asJson), ("shippingCarrierCode", a.shippingCarrierCode.asJson), ("trackingNumber", a.trackingNumber.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeShippingFulfillmentDetails: _root_.io.circe.Decoder[ShippingFulfillmentDetails] = new _root_.io.circe.Decoder[ShippingFulfillmentDetails] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ShippingFulfillmentDetails] = for (v0 <- c.downField("lineItems").as[Option[_root_.scala.Vector[LineItemReference]]]; v1 <- c.downField("shippedDate").as[Option[String]]; v2 <- c.downField("shippingCarrierCode").as[Option[String]]; v3 <- c.downField("trackingNumber").as[Option[String]]) yield ShippingFulfillmentDetails(v0, v1, v2, v3) }
}