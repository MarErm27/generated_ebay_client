/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class EbayVaultProgram(fulfillmentType: Option[String] = None)
object EbayVaultProgram {
  implicit val encodeEbayVaultProgram: _root_.io.circe.Encoder.AsObject[EbayVaultProgram] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[EbayVaultProgram](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("fulfillmentType", a.fulfillmentType.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeEbayVaultProgram: _root_.io.circe.Decoder[EbayVaultProgram] = new _root_.io.circe.Decoder[EbayVaultProgram] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[EbayVaultProgram] = for (v0 <- c.downField("fulfillmentType").as[Option[String]]) yield EbayVaultProgram(v0) }
}