/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ShippingFulfillmentPagedCollection(fulfillments: Option[_root_.scala.Vector[ShippingFulfillment]] = None, total: Option[Int] = None, warnings: Option[_root_.scala.Vector[Error]] = None)
object ShippingFulfillmentPagedCollection {
  implicit val encodeShippingFulfillmentPagedCollection: _root_.io.circe.Encoder.AsObject[ShippingFulfillmentPagedCollection] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ShippingFulfillmentPagedCollection](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("fulfillments", a.fulfillments.asJson), ("total", a.total.asJson), ("warnings", a.warnings.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeShippingFulfillmentPagedCollection: _root_.io.circe.Decoder[ShippingFulfillmentPagedCollection] = new _root_.io.circe.Decoder[ShippingFulfillmentPagedCollection] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ShippingFulfillmentPagedCollection] = for (v0 <- c.downField("fulfillments").as[Option[_root_.scala.Vector[ShippingFulfillment]]]; v1 <- c.downField("total").as[Option[Int]]; v2 <- c.downField("warnings").as[Option[_root_.scala.Vector[Error]]]) yield ShippingFulfillmentPagedCollection(v0, v1, v2) }
}