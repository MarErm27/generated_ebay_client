/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class DeliveryCost(importCharges: Option[Amount] = None, shippingCost: Option[Amount] = None, shippingIntermediationFee: Option[Amount] = None)
object DeliveryCost {
  implicit val encodeDeliveryCost: _root_.io.circe.Encoder.AsObject[DeliveryCost] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[DeliveryCost](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("importCharges", a.importCharges.asJson), ("shippingCost", a.shippingCost.asJson), ("shippingIntermediationFee", a.shippingIntermediationFee.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeDeliveryCost: _root_.io.circe.Decoder[DeliveryCost] = new _root_.io.circe.Decoder[DeliveryCost] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[DeliveryCost] = for (v0 <- c.downField("importCharges").as[Option[Amount]]; v1 <- c.downField("shippingCost").as[Option[Amount]]; v2 <- c.downField("shippingIntermediationFee").as[Option[Amount]]) yield DeliveryCost(v0, v1, v2) }
}