/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class PaymentDisputeSummary(amount: Option[SimpleAmount] = None, buyerUsername: Option[String] = None, closedDate: Option[String] = None, openDate: Option[String] = None, orderId: Option[String] = None, paymentDisputeId: Option[String] = None, paymentDisputeStatus: Option[String] = None, reason: Option[String] = None, respondByDate: Option[String] = None)
object PaymentDisputeSummary {
  implicit val encodePaymentDisputeSummary: _root_.io.circe.Encoder.AsObject[PaymentDisputeSummary] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[PaymentDisputeSummary](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("amount", a.amount.asJson), ("buyerUsername", a.buyerUsername.asJson), ("closedDate", a.closedDate.asJson), ("openDate", a.openDate.asJson), ("orderId", a.orderId.asJson), ("paymentDisputeId", a.paymentDisputeId.asJson), ("paymentDisputeStatus", a.paymentDisputeStatus.asJson), ("reason", a.reason.asJson), ("respondByDate", a.respondByDate.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePaymentDisputeSummary: _root_.io.circe.Decoder[PaymentDisputeSummary] = new _root_.io.circe.Decoder[PaymentDisputeSummary] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[PaymentDisputeSummary] = for (v0 <- c.downField("amount").as[Option[SimpleAmount]]; v1 <- c.downField("buyerUsername").as[Option[String]]; v2 <- c.downField("closedDate").as[Option[String]]; v3 <- c.downField("openDate").as[Option[String]]; v4 <- c.downField("orderId").as[Option[String]]; v5 <- c.downField("paymentDisputeId").as[Option[String]]; v6 <- c.downField("paymentDisputeStatus").as[Option[String]]; v7 <- c.downField("reason").as[Option[String]]; v8 <- c.downField("respondByDate").as[Option[String]]) yield PaymentDisputeSummary(v0, v1, v2, v3, v4, v5, v6, v7, v8) }
}