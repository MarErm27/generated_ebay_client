/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ShippingFulfillment(fulfillmentId: Option[String] = None, lineItems: Option[_root_.scala.Vector[LineItemReference]] = None, shipmentTrackingNumber: Option[String] = None, shippedDate: Option[String] = None, shippingCarrierCode: Option[String] = None)
object ShippingFulfillment {
  implicit val encodeShippingFulfillment: _root_.io.circe.Encoder.AsObject[ShippingFulfillment] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ShippingFulfillment](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("fulfillmentId", a.fulfillmentId.asJson), ("lineItems", a.lineItems.asJson), ("shipmentTrackingNumber", a.shipmentTrackingNumber.asJson), ("shippedDate", a.shippedDate.asJson), ("shippingCarrierCode", a.shippingCarrierCode.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeShippingFulfillment: _root_.io.circe.Decoder[ShippingFulfillment] = new _root_.io.circe.Decoder[ShippingFulfillment] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ShippingFulfillment] = for (v0 <- c.downField("fulfillmentId").as[Option[String]]; v1 <- c.downField("lineItems").as[Option[_root_.scala.Vector[LineItemReference]]]; v2 <- c.downField("shipmentTrackingNumber").as[Option[String]]; v3 <- c.downField("shippedDate").as[Option[String]]; v4 <- c.downField("shippingCarrierCode").as[Option[String]]) yield ShippingFulfillment(v0, v1, v2, v3, v4) }
}