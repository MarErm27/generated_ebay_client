/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class TrackingInfo(shipmentTrackingNumber: Option[String] = None, shippingCarrierCode: Option[String] = None)
object TrackingInfo {
  implicit val encodeTrackingInfo: _root_.io.circe.Encoder.AsObject[TrackingInfo] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[TrackingInfo](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("shipmentTrackingNumber", a.shipmentTrackingNumber.asJson), ("shippingCarrierCode", a.shippingCarrierCode.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeTrackingInfo: _root_.io.circe.Decoder[TrackingInfo] = new _root_.io.circe.Decoder[TrackingInfo] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[TrackingInfo] = for (v0 <- c.downField("shipmentTrackingNumber").as[Option[String]]; v1 <- c.downField("shippingCarrierCode").as[Option[String]]) yield TrackingInfo(v0, v1) }
}