/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Buyer(taxAddress: Option[TaxAddress] = None, taxIdentifier: Option[TaxIdentifier] = None, username: Option[String] = None)
object Buyer {
  implicit val encodeBuyer: _root_.io.circe.Encoder.AsObject[Buyer] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Buyer](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("taxAddress", a.taxAddress.asJson), ("taxIdentifier", a.taxIdentifier.asJson), ("username", a.username.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeBuyer: _root_.io.circe.Decoder[Buyer] = new _root_.io.circe.Decoder[Buyer] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Buyer] = for (v0 <- c.downField("taxAddress").as[Option[TaxAddress]]; v1 <- c.downField("taxIdentifier").as[Option[TaxIdentifier]]; v2 <- c.downField("username").as[Option[String]]) yield Buyer(v0, v1, v2) }
}