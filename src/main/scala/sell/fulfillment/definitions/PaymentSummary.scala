/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class PaymentSummary(payments: Option[_root_.scala.Vector[Payment]] = None, refunds: Option[_root_.scala.Vector[OrderRefund]] = None, totalDueSeller: Option[Amount] = None)
object PaymentSummary {
  implicit val encodePaymentSummary: _root_.io.circe.Encoder.AsObject[PaymentSummary] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[PaymentSummary](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("payments", a.payments.asJson), ("refunds", a.refunds.asJson), ("totalDueSeller", a.totalDueSeller.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePaymentSummary: _root_.io.circe.Decoder[PaymentSummary] = new _root_.io.circe.Decoder[PaymentSummary] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[PaymentSummary] = for (v0 <- c.downField("payments").as[Option[_root_.scala.Vector[Payment]]]; v1 <- c.downField("refunds").as[Option[_root_.scala.Vector[OrderRefund]]]; v2 <- c.downField("totalDueSeller").as[Option[Amount]]) yield PaymentSummary(v0, v1, v2) }
}