/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class PaymentDisputeActivity(activityDate: Option[String] = None, activityType: Option[String] = None, actor: Option[String] = None)
object PaymentDisputeActivity {
  implicit val encodePaymentDisputeActivity: _root_.io.circe.Encoder.AsObject[PaymentDisputeActivity] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[PaymentDisputeActivity](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("activityDate", a.activityDate.asJson), ("activityType", a.activityType.asJson), ("actor", a.actor.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePaymentDisputeActivity: _root_.io.circe.Decoder[PaymentDisputeActivity] = new _root_.io.circe.Decoder[PaymentDisputeActivity] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[PaymentDisputeActivity] = for (v0 <- c.downField("activityDate").as[Option[String]]; v1 <- c.downField("activityType").as[Option[String]]; v2 <- c.downField("actor").as[Option[String]]) yield PaymentDisputeActivity(v0, v1, v2) }
}