/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class AppliedPromotion(description: Option[String] = None, discountAmount: Option[Amount] = None, promotionId: Option[String] = None)
object AppliedPromotion {
  implicit val encodeAppliedPromotion: _root_.io.circe.Encoder.AsObject[AppliedPromotion] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[AppliedPromotion](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("description", a.description.asJson), ("discountAmount", a.discountAmount.asJson), ("promotionId", a.promotionId.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeAppliedPromotion: _root_.io.circe.Decoder[AppliedPromotion] = new _root_.io.circe.Decoder[AppliedPromotion] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[AppliedPromotion] = for (v0 <- c.downField("description").as[Option[String]]; v1 <- c.downField("discountAmount").as[Option[Amount]]; v2 <- c.downField("promotionId").as[Option[String]]) yield AppliedPromotion(v0, v1, v2) }
}