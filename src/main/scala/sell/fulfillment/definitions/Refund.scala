/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Refund(refundId: Option[String] = None, refundStatus: Option[String] = None)
object Refund {
  implicit val encodeRefund: _root_.io.circe.Encoder.AsObject[Refund] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Refund](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("refundId", a.refundId.asJson), ("refundStatus", a.refundStatus.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeRefund: _root_.io.circe.Decoder[Refund] = new _root_.io.circe.Decoder[Refund] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Refund] = for (v0 <- c.downField("refundId").as[Option[String]]; v1 <- c.downField("refundStatus").as[Option[String]]) yield Refund(v0, v1) }
}