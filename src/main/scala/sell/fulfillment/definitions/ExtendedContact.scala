/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ExtendedContact(companyName: Option[String] = None, contactAddress: Option[Address] = None, email: Option[String] = None, fullName: Option[String] = None, primaryPhone: Option[PhoneNumber] = None)
object ExtendedContact {
  implicit val encodeExtendedContact: _root_.io.circe.Encoder.AsObject[ExtendedContact] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ExtendedContact](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("companyName", a.companyName.asJson), ("contactAddress", a.contactAddress.asJson), ("email", a.email.asJson), ("fullName", a.fullName.asJson), ("primaryPhone", a.primaryPhone.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeExtendedContact: _root_.io.circe.Decoder[ExtendedContact] = new _root_.io.circe.Decoder[ExtendedContact] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ExtendedContact] = for (v0 <- c.downField("companyName").as[Option[String]]; v1 <- c.downField("contactAddress").as[Option[Address]]; v2 <- c.downField("email").as[Option[String]]; v3 <- c.downField("fullName").as[Option[String]]; v4 <- c.downField("primaryPhone").as[Option[PhoneNumber]]) yield ExtendedContact(v0, v1, v2, v3, v4) }
}