/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ItemLocation(countryCode: Option[String] = None, location: Option[String] = None, postalCode: Option[String] = None)
object ItemLocation {
  implicit val encodeItemLocation: _root_.io.circe.Encoder.AsObject[ItemLocation] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ItemLocation](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("countryCode", a.countryCode.asJson), ("location", a.location.asJson), ("postalCode", a.postalCode.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeItemLocation: _root_.io.circe.Decoder[ItemLocation] = new _root_.io.circe.Decoder[ItemLocation] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ItemLocation] = for (v0 <- c.downField("countryCode").as[Option[String]]; v1 <- c.downField("location").as[Option[String]]; v2 <- c.downField("postalCode").as[Option[String]]) yield ItemLocation(v0, v1, v2) }
}