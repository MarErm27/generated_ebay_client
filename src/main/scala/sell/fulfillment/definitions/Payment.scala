/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Payment(amount: Option[Amount] = None, paymentDate: Option[String] = None, paymentHolds: Option[_root_.scala.Vector[PaymentHold]] = None, paymentMethod: Option[String] = None, paymentReferenceId: Option[String] = None, paymentStatus: Option[String] = None)
object Payment {
  implicit val encodePayment: _root_.io.circe.Encoder.AsObject[Payment] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Payment](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("amount", a.amount.asJson), ("paymentDate", a.paymentDate.asJson), ("paymentHolds", a.paymentHolds.asJson), ("paymentMethod", a.paymentMethod.asJson), ("paymentReferenceId", a.paymentReferenceId.asJson), ("paymentStatus", a.paymentStatus.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePayment: _root_.io.circe.Decoder[Payment] = new _root_.io.circe.Decoder[Payment] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Payment] = for (v0 <- c.downField("amount").as[Option[Amount]]; v1 <- c.downField("paymentDate").as[Option[String]]; v2 <- c.downField("paymentHolds").as[Option[_root_.scala.Vector[PaymentHold]]]; v3 <- c.downField("paymentMethod").as[Option[String]]; v4 <- c.downField("paymentReferenceId").as[Option[String]]; v5 <- c.downField("paymentStatus").as[Option[String]]) yield Payment(v0, v1, v2, v3, v4, v5) }
}