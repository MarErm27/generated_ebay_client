/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class ShippingStep(shippingCarrierCode: Option[String] = None, shippingServiceCode: Option[String] = None, shipTo: Option[ExtendedContact] = None, shipToReferenceId: Option[String] = None)
object ShippingStep {
  implicit val encodeShippingStep: _root_.io.circe.Encoder.AsObject[ShippingStep] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ShippingStep](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("shippingCarrierCode", a.shippingCarrierCode.asJson), ("shippingServiceCode", a.shippingServiceCode.asJson), ("shipTo", a.shipTo.asJson), ("shipToReferenceId", a.shipToReferenceId.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeShippingStep: _root_.io.circe.Decoder[ShippingStep] = new _root_.io.circe.Decoder[ShippingStep] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ShippingStep] = for (v0 <- c.downField("shippingCarrierCode").as[Option[String]]; v1 <- c.downField("shippingServiceCode").as[Option[String]]; v2 <- c.downField("shipTo").as[Option[ExtendedContact]]; v3 <- c.downField("shipToReferenceId").as[Option[String]]) yield ShippingStep(v0, v1, v2, v3) }
}