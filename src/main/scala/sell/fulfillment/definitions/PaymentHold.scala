/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class PaymentHold(expectedReleaseDate: Option[String] = None, holdAmount: Option[Amount] = None, holdReason: Option[String] = None, holdState: Option[String] = None, releaseDate: Option[String] = None, sellerActionsToRelease: Option[_root_.scala.Vector[SellerActionsToRelease]] = None)
object PaymentHold {
  implicit val encodePaymentHold: _root_.io.circe.Encoder.AsObject[PaymentHold] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[PaymentHold](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("expectedReleaseDate", a.expectedReleaseDate.asJson), ("holdAmount", a.holdAmount.asJson), ("holdReason", a.holdReason.asJson), ("holdState", a.holdState.asJson), ("releaseDate", a.releaseDate.asJson), ("sellerActionsToRelease", a.sellerActionsToRelease.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodePaymentHold: _root_.io.circe.Decoder[PaymentHold] = new _root_.io.circe.Decoder[PaymentHold] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[PaymentHold] = for (v0 <- c.downField("expectedReleaseDate").as[Option[String]]; v1 <- c.downField("holdAmount").as[Option[Amount]]; v2 <- c.downField("holdReason").as[Option[String]]; v3 <- c.downField("holdState").as[Option[String]]; v4 <- c.downField("releaseDate").as[Option[String]]; v5 <- c.downField("sellerActionsToRelease").as[Option[_root_.scala.Vector[SellerActionsToRelease]]]) yield PaymentHold(v0, v1, v2, v3, v4, v5) }
}