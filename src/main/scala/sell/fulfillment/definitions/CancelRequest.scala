/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class CancelRequest(cancelCompletedDate: Option[String] = None, cancelInitiator: Option[String] = None, cancelReason: Option[String] = None, cancelRequestedDate: Option[String] = None, cancelRequestId: Option[String] = None, cancelRequestState: Option[String] = None)
object CancelRequest {
  implicit val encodeCancelRequest: _root_.io.circe.Encoder.AsObject[CancelRequest] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[CancelRequest](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("cancelCompletedDate", a.cancelCompletedDate.asJson), ("cancelInitiator", a.cancelInitiator.asJson), ("cancelReason", a.cancelReason.asJson), ("cancelRequestedDate", a.cancelRequestedDate.asJson), ("cancelRequestId", a.cancelRequestId.asJson), ("cancelRequestState", a.cancelRequestState.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeCancelRequest: _root_.io.circe.Decoder[CancelRequest] = new _root_.io.circe.Decoder[CancelRequest] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[CancelRequest] = for (v0 <- c.downField("cancelCompletedDate").as[Option[String]]; v1 <- c.downField("cancelInitiator").as[Option[String]]; v2 <- c.downField("cancelReason").as[Option[String]]; v3 <- c.downField("cancelRequestedDate").as[Option[String]]; v4 <- c.downField("cancelRequestId").as[Option[String]]; v5 <- c.downField("cancelRequestState").as[Option[String]]) yield CancelRequest(v0, v1, v2, v3, v4, v5) }
}