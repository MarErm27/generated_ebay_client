/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Program(authenticityVerification: Option[PostSaleAuthenticationProgram] = None, ebayVault: Option[EbayVaultProgram] = None, fulfillmentProgram: Option[EbayFulfillmentProgram] = None)
object Program {
  implicit val encodeProgram: _root_.io.circe.Encoder.AsObject[Program] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Program](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("authenticityVerification", a.authenticityVerification.asJson), ("ebayVault", a.ebayVault.asJson), ("fulfillmentProgram", a.fulfillmentProgram.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeProgram: _root_.io.circe.Decoder[Program] = new _root_.io.circe.Decoder[Program] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Program] = for (v0 <- c.downField("authenticityVerification").as[Option[PostSaleAuthenticationProgram]]; v1 <- c.downField("ebayVault").as[Option[EbayVaultProgram]]; v2 <- c.downField("fulfillmentProgram").as[Option[EbayFulfillmentProgram]]) yield Program(v0, v1, v2) }
}