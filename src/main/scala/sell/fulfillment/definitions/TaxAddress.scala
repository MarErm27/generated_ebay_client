/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class TaxAddress(city: Option[String] = None, countryCode: Option[String] = None, postalCode: Option[String] = None, stateOrProvince: Option[String] = None)
object TaxAddress {
  implicit val encodeTaxAddress: _root_.io.circe.Encoder.AsObject[TaxAddress] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[TaxAddress](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("city", a.city.asJson), ("countryCode", a.countryCode.asJson), ("postalCode", a.postalCode.asJson), ("stateOrProvince", a.stateOrProvince.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeTaxAddress: _root_.io.circe.Decoder[TaxAddress] = new _root_.io.circe.Decoder[TaxAddress] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[TaxAddress] = for (v0 <- c.downField("city").as[Option[String]]; v1 <- c.downField("countryCode").as[Option[String]]; v2 <- c.downField("postalCode").as[Option[String]]; v3 <- c.downField("stateOrProvince").as[Option[String]]) yield TaxAddress(v0, v1, v2, v3) }
}