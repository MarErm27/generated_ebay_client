/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Error(category: Option[String] = None, domain: Option[String] = None, errorId: Option[Int] = None, inputRefIds: Option[Vector[String]] = None, longMessage: Option[String] = None, message: Option[String] = None, outputRefIds: Option[Vector[String]] = None, parameters: Option[_root_.scala.Vector[ErrorParameter]] = None, subdomain: Option[String] = None)
object Error {
  implicit val encodeError: _root_.io.circe.Encoder.AsObject[Error] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Error](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("category", a.category.asJson), ("domain", a.domain.asJson), ("errorId", a.errorId.asJson), ("inputRefIds", a.inputRefIds.asJson), ("longMessage", a.longMessage.asJson), ("message", a.message.asJson), ("outputRefIds", a.outputRefIds.asJson), ("parameters", a.parameters.asJson), ("subdomain", a.subdomain.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeError: _root_.io.circe.Decoder[Error] = new _root_.io.circe.Decoder[Error] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Error] = for (v0 <- c.downField("category").as[Option[String]]; v1 <- c.downField("domain").as[Option[String]]; v2 <- c.downField("errorId").as[Option[Int]]; v3 <- c.downField("inputRefIds").as[Option[Vector[String]]]; v4 <- c.downField("longMessage").as[Option[String]]; v5 <- c.downField("message").as[Option[String]]; v6 <- c.downField("outputRefIds").as[Option[Vector[String]]]; v7 <- c.downField("parameters").as[Option[_root_.scala.Vector[ErrorParameter]]]; v8 <- c.downField("subdomain").as[Option[String]]) yield Error(v0, v1, v2, v3, v4, v5, v6, v7, v8) }
}