/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class Tax(amount: Option[Amount] = None, taxType: Option[String] = None)
object Tax {
  implicit val encodeTax: _root_.io.circe.Encoder.AsObject[Tax] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[Tax](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("amount", a.amount.asJson), ("taxType", a.taxType.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeTax: _root_.io.circe.Decoder[Tax] = new _root_.io.circe.Decoder[Tax] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[Tax] = for (v0 <- c.downField("amount").as[Option[Amount]]; v1 <- c.downField("taxType").as[Option[String]]) yield Tax(v0, v1) }
}