/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package sell.fulfillment.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.sell.fulfillment.Implicits._
case class CancelStatus(cancelledDate: Option[String] = None, cancelRequests: Option[_root_.scala.Vector[CancelRequest]] = None, cancelState: Option[String] = None)
object CancelStatus {
  implicit val encodeCancelStatus: _root_.io.circe.Encoder.AsObject[CancelStatus] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[CancelStatus](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("cancelledDate", a.cancelledDate.asJson), ("cancelRequests", a.cancelRequests.asJson), ("cancelState", a.cancelState.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeCancelStatus: _root_.io.circe.Decoder[CancelStatus] = new _root_.io.circe.Decoder[CancelStatus] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[CancelStatus] = for (v0 <- c.downField("cancelledDate").as[Option[String]]; v1 <- c.downField("cancelRequests").as[Option[_root_.scala.Vector[CancelRequest]]]; v2 <- c.downField("cancelState").as[Option[String]]) yield CancelStatus(v0, v1, v2) }
}