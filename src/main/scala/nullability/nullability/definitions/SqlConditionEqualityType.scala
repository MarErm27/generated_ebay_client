/*
 * This file was generated by Guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package nullability.definitions
import _root_.nullability.Implicits._
import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import io.circe.generic.semiauto._
import cats.implicits._
sealed abstract class SqlConditionEqualityType(val value: String) { override def toString: String = value.toString }
object SqlConditionEqualityType {
  object members {
    case object Equal extends SqlConditionEqualityType("EQUAL")
    case object LessThanOrEqual extends SqlConditionEqualityType("LESS_THAN_OR_EQUAL")
    case object GreaterThanOrEqual extends SqlConditionEqualityType("GREATER_THAN_OR_EQUAL")
    case object Less extends SqlConditionEqualityType("LESS")
    case object Greater extends SqlConditionEqualityType("GREATER")
    case object NotEqual extends SqlConditionEqualityType("NOT_EQUAL")
  }
  val Equal: SqlConditionEqualityType = members.Equal
  val LessThanOrEqual: SqlConditionEqualityType = members.LessThanOrEqual
  val GreaterThanOrEqual: SqlConditionEqualityType = members.GreaterThanOrEqual
  val Less: SqlConditionEqualityType = members.Less
  val Greater: SqlConditionEqualityType = members.Greater
  val NotEqual: SqlConditionEqualityType = members.NotEqual
  val values = Vector(Equal, LessThanOrEqual, GreaterThanOrEqual, Less, Greater, NotEqual)
  implicit val encodeSqlConditionEqualityType: Encoder[SqlConditionEqualityType] = Encoder[String].contramap(_.value)
  implicit val decodeSqlConditionEqualityType: Decoder[SqlConditionEqualityType] = Decoder[String].emap(value => parse(value).toRight(s"$value not a member of SqlConditionEqualityType"))
  implicit val addPathSqlConditionEqualityType: AddPath[SqlConditionEqualityType] = AddPath.build(_.value)
  implicit val showSqlConditionEqualityType: Show[SqlConditionEqualityType] = Show.build(_.value)
  def parse(value: String): Option[SqlConditionEqualityType] = values.find(_.value == value)
  implicit val order: cats.Order[SqlConditionEqualityType] = cats.Order.by[SqlConditionEqualityType, Int](values.indexOf)
}